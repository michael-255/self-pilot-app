import { execSync } from 'child_process'
import fs from 'fs'
import path, { dirname } from 'path'
import { fileURLToPath } from 'url'

const scriptName = path.basename(fileURLToPath(import.meta.url))
const projectRootDir = path.resolve(dirname(fileURLToPath(import.meta.url)), '../')

function generateLocalSupabaseEnv() {
  try {
    console.log(`STARTING SCRIPT: ${scriptName}`)

    // Provide this argument when running the script to set a custom project ID
    const projectId = process.argv[2] || 'unnamed-project'

    // Get Supabase variables using the Supabase CLI and write to a temp file
    const supabaseVars = JSON.parse(execSync('npx supabase status -o json').toString())

    // Define needed variables
    const newLocalEnv = {
      NUXT_PUBLIC_SUPABASE_URL: supabaseVars['API_URL'],
      NUXT_PUBLIC_SUPABASE_KEY: supabaseVars['ANON_KEY'],
      NUXT_PUBLIC_SITE_URL: 'http://localhost:3000/',
      SUPABASE_PROJECT_ID: projectId,
      SUPABASE_CONNECTION_STRING: supabaseVars['DB_URL'],
      SUPABASE_SERVICE_ROLE_KEY: supabaseVars['SERVICE_ROLE_KEY'],
      SUPABASE_JWT_SECRET: supabaseVars['JWT_SECRET'],
    }

    // Write new variables to ".env.local-supabase" file
    const newEnvLocalSupabaseString =
      `# THIS FILE WAS AUTOGENERATED BY "${scriptName}"\n` +
      Object.entries(newLocalEnv)
        .map(([key, value]) => `${key}="${value}"`)
        .join('\n')

    const envLocalSupabasePath = path.join(projectRootDir, '.env.local-supabase')
    fs.writeFileSync(envLocalSupabasePath, newEnvLocalSupabaseString)

    console.log(`Script "${scriptName}" completed!`)
  } catch (error) {
    console.error(`Error with script: ${scriptName}`, error)
    process.exit(1)
  }
}

generateLocalSupabaseEnv()
